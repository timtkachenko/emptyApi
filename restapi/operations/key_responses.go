// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "emptyApi/models"
)

// KeyOKCode is the HTTP code returned for type KeyOK
const KeyOKCode int = 200

/*KeyOK Success

swagger:response keyOK
*/
type KeyOK struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewKeyOK creates KeyOK with default headers values
func NewKeyOK() *KeyOK {

	return &KeyOK{}
}

// WithPayload adds the payload to the key o k response
func (o *KeyOK) WithPayload(payload string) *KeyOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the key o k response
func (o *KeyOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *KeyOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*KeyDefault Error

swagger:response keyDefault
*/
type KeyDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewKeyDefault creates KeyDefault with default headers values
func NewKeyDefault(code int) *KeyDefault {
	if code <= 0 {
		code = 500
	}

	return &KeyDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the key default response
func (o *KeyDefault) WithStatusCode(code int) *KeyDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the key default response
func (o *KeyDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the key default response
func (o *KeyDefault) WithPayload(payload *models.Error) *KeyDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the key default response
func (o *KeyDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *KeyDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
